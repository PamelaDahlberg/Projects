Chapter 4
how do we express a program as a set of cooperating parts and how can they share and exchange data

Our job as programmers is to express computations
• Correctly
• Simply
• Efficiently

When programming is done well, such concerns minimize the need for the most frustrating part of programming:
debugging

good program structure during development can minimize the number of mistakes made and the time needed
to search for such errors and to remove them

Our main tool for organizing a program — and for organizing our thoughts as we program — is to break up a big
computation into many little ones. This technique comes in two variations:
• Abstraction: Hide details that we don’t need to use a facility (“implementation details”) behind a convenient and general
interface. For example, rather than considering the details of how to sort a phone book (thick books have been written
about how to sort), we just call the sort algorithm from the C++ standard library. All we need to know to sort is how to
invoke (call) that algorithm, so we can write sort(b) where b refers to the phone book; sort() is a variant (§21.9) of the
standard library sort algorithm (§21.8, §B.5.4) defined in std_library.h. Another example is the way we use computer
memory. Direct use of memory can be quite messy, so we access it through typed and named variables (§3.2), standard
library vectors (§4.6, Chapters 17–19), maps (Chapter 21), etc.
• “Divide and conquer”: Here we take a large problem and divide it into several little ones. For example, if we need to
build a dictionary, we can separate that job into three: read the data, sort the data, and output the data. Each of the
resulting problems is significantly smaller than the original.


constexpr must be defined at time of compile
const must be defined and then not changed after initialization


Chapter 5
• Compile-time errors: Errors found by the compiler. We can further classify compile-time errors based on which
language rules they violate, for example:
• Syntax errors
• Type errors
• Link-time errors: Errors found by the linker when it is trying to combine object files into an executable program.
• Run-time errors: Errors found by checks in a running program. We can further classify run-time errors as
• Errors detected by the computer (hardware and/or operating system)
• Errors detected by a library (e.g., the standard library)
• Errors detected by user code
• Logic errors: Errors found by the programmer looking for the causes of erroneous results.


• Poor specification: If we are not specific about what a program should do, we are unlikely to adequately examine the
“dark corners” and make sure that all cases are handled (i.e., that every input gives a correct answer or an adequate error
message).
• Incomplete programs: During development, there are obviously cases that we haven’t yet taken care of. That’s
unavoidable. What we must aim for is to know when we have handled all cases.
• Unexpected arguments: Functions take arguments. If a function is given an argument we don’t handle, we have a
problem. An example is calling the standard library square root function with –1.2: sqrt(–1.2). Since sqrt() of a
double returns a double, there is no possible correct return value. §5.5.3 discusses this kind of problem.
• Unexpected input: Programs typically read data (from a keyboard, from files, from GUIs, from network connections,
etc.). A program makes many assumptions about such input, for example, that the user will input a number. What if the
user inputs “aw, shut up!” rather than the expected integer? §5.6.3 and §10.6 discuss this kind of problem.
• Unexpected state: Most programs keep a lot of data (“state”) around for use by different parts of the system. Examples
are address lists, phone directories, and vectors of temperature readings. What if such data is incomplete or wrong? The
various parts of the program must still manage. §26.3.5 discusses this kind of problem.
• Logical errors: That is, code that simply doesn’t do what it was supposed to do; we’ll just have to find and fix such
problems. §6.6 and §6.9 give examples of finding such problems.


Make the program easy to read so that you have a chance of spotting the bugs:
• Comment your code well. That doesn’t simply mean “Add a lot of comments.” You don’t say in English what is better
said in code. Rather, you say in the comments — as clearly and briefly as you can — what can’t be said clearly in code:
• The name of the program
• The purpose of the program
• Who wrote this code and when
• Version numbers
• What complicated code fragments are supposed to do
• What the general design ideas are
• How the source code is organized
• What assumptions are made about inputs
• What parts of the code are still missing and what cases are still not handled
• Use meaningful names.
• That doesn’t simply mean “Use long names.”
• Use a consistent layout of code.
• Your IDE tries to help, but it can’t do everything and you are the one responsible.
• The style used in this book is a reasonable starting point.
• Break code into small functions, each expressing a logical action.
• Try to avoid functions longer than a page or two; most functions will be much shorter.
• Avoid complicated code sequences.
• Try to avoid nested loops, nested if-statements, complicated conditions, etc. Unfortunately, you sometimes need those,
but remember that complicated code is where bugs can most easily hide.
• Use library facilities rather than your own code when you can.
• A library is likely to be better thought out and better tested than what you could produce as an alternative while busily
solving your main problem

Attitude 1: I’m smarter than any program! I’ll break that @#$%^ code!
Attitude 2: I polished this code for two weeks. It’s perfect!
Who do you think will find more errors? Of course, the very best is an experienced person with a bit of “attitude 1” who
coolly, calmly, patiently, and systematically works through the possible failings of the program. Good testers are worth their
weight in gold.
